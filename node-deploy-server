#!/bin/sh
":" //# http://sambal.org/2014/02/passing-options-node-shebang-line/; exec /usr/bin/env node --harmony-async-await "$0" "$@"

require('dotenv').config({silent: true})
const app = require('express')()
const path = require('path')
const GitHubApi = require('github')
const crypto = require('crypto')
const download = require('download')
const Zip = require('adm-zip')
const fs = require('fs-extra')
const exec = require('child_process').exec
const debug = require('debug')('app')
const host = process.env.HOST || '127.0.0.1'
const port = process.env.PORT || 3000
const secret = process.env.SECRET || ''
const github = new GitHubApi({
  protocol: 'https',
  host: 'api.github.com',
  headers: {
    'user-agent': 'node-deploy-server'
  },
  Promise: require('bluebird'),
  followRedirects: false,
  timeout: 5000
})
const savedLogName = '.node-deploy-server-log.json'
const move = (source, target) => {
  fs.existsSync(target) && fs.removeSync(target)
  fs.existsSync(source) && fs.renameSync(source, target)
}
const unlink = path => {
  fs.existsSync(path) && fs.removeSync(path)
}
const isRegexTag = (assign, against) => {
  try {
    if (assign && assign.match(/[\^\*]/) && !against.match(new RegExp(assign))) {
      return false
    }
  } catch (e) {
    return false
  }

  return true
}

app.use(require('body-parser').json())
app.use((req, res, next) => {
  const json = req.body
  const payload = JSON.stringify(json).replace(/[\u007F-\uFFFF]/g, chr => {
    return '\\u' + ('0000' + chr.charCodeAt(0).toString(16)).substr(-4)
  })
  const hex = crypto.createHmac('sha1', secret).update(payload, 'utf-8').digest('hex')
  const sha1 = `sha1=${hex}`

  debug(`incoming request: ${req.headers['x-hub-signature']}`)
  debug(`compare with ${sha1}`)
  debug(`here is your secret ${secret}`)

  if (sha1 !== req.headers['x-hub-signature']) {
    return res.sendStatus(403)
  }

  next()
})

app.post('/', async (req, res) => {
  const tag = req.body.tag
  const command = req.body.command || []
  const owner = req.body.owner
  const repo = req.body.repo
  const dist = req.body.dist
  const ignore = req.body.ignore || []
  const commands = Array.isArray(command) ? command : [command]
  const ignores = Array.isArray(ignore) ? ignore : [ignore]

  if (owner && repo && dist) {
    const available = {}
    const githubTags = await github.repos.getTags({owner: owner, repo: repo})
    for (const githubTag of githubTags) {
      githubTag.name && isRegexTag(tag, githubTag.name) && (available[githubTag.name] = githubTag)
    }

    const tags = Object.keys(available).sort()
    const log = path.join(dist, savedLogName)
    const backlog = fs.existsSync(log) ? fs.readJsonSync(log, {throws: false}) : []
    const newTag = tags.pop()
    const previousTag = backlog[backlog.length - 2]
    if (newTag) {
      debug('tag founded!')
      const commit = tag === false ? available[previousTag] : (available[tag] || available[newTag]);

      if (undefined === commit) {
        unlink(dist)
        return res.sendStatus(200)
      }

      const targetTag = commit.name
      const zipBall = commit.zipball_url
      const sha = commit.commit.sha.substr(0, 7)
      const bak = `${dist}_${sha}_bak`
      const file = path.join(dist, path.basename(zipBall))

      if (backlog.indexOf(targetTag) !== -1 && tag === "") {
        return res.sendStatus(200)
      } else {
        const notFound = backlog.indexOf(targetTag) === -1
        notFound && backlog.push(targetTag)
        backlog.sort()
        const index = backlog.indexOf(targetTag)
        const length = notFound && backlog.length === 1 ? 0 : backlog.length
        backlog.splice(index + 1, length)
      }

      move(dist, bak)

      try {
        debug('start downloading zipball')
        await download(zipBall, dist)
        const entries = (new Zip(file)).getEntries();
        entries.forEach(function(zipEntry) {
          if (!zipEntry.isDirectory) {
            const save = zipEntry.rawEntryName.toString().split('/').slice(1)
            const real = path.join(dist, save.join('/'))
            fs.outputFile(real, zipEntry.getData().toString())
          }
        });

        for (const origin of ignores) {
          if (origin) {
            const _bak = path.join(bak, origin)
            const _dist = path.join(dist, origin)
            move(_bak, _dist)
          }
        }

        for (const cmd of commands) {
          if (cmd) {
            debug(cmd)
            exec(cmd, {cwd: dist})
          }
        }

        debug('success!')
        fs.outputJsonSync(log, backlog)
        res.sendStatus(200)
      } catch (e) {
        debug('invalid request')
        move(bak, dist)
        res.sendStatus(500)
      } finally {
        debug('request finished!')
        unlink(bak)
        unlink(file)
      }
    } else {
      res.sendStatus(200)
    }
  } else {
    res.sendStatus(404)
  }
})


app.listen(port, host)
