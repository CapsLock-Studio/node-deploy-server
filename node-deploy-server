#!/usr/bin/env node --harmony-async-await

const app = require('express')()
const path = require('path')
const GitHubApi = require('github')
const crypto = require('crypto')
const download = require('download')
const zip = require('adm-zip')
const fs = require('fs-extra')
const spawn = require('child_process').spawn
const hostname = process.env.HOSTNAME || '127.0.0.1'
const port = process.env.PORT || 3000
const secret = process.env.SECRET || ''
const github = new GitHubApi({
  debug: true,
  protocol: 'https',
  host: 'api.github.com',
  headers: {
    'user-agent': 'node-deploy-server'
  },
  Promise: require('bluebird'),
  followRedirects: false,
  timeout: 5000
})
const signature = (json) => {
  const payload = JSON.stringify(json).replace(/[\u007F-\uFFFF]/g, (chr) => {
    return '\\u' + ('0000' + chr.charCodeAt(0).toString(16)).substr(-4)
  })
  const hmac = crypto.createHmac('sha1', secret)
  hmac.update(payload)
  const hex = hmac.digest('hex')
  const sha1 = `sha1=${hex}`

  return sha1
}

app.use(require('body-parser').json())
app.post('/', async (req, res) => {
  res.sendStatus(200)
  if (signature(req.body) != req.headers['x-hub-signature']) {
    return false
  }

  const tag = req.body.tag
  const command = req.body.command
  const owner = req.body.owner
  const repo = req.body.repo
  const dist = req.body.dist

  if (owner && repo && dist) {
    const available = {}
    const githubTags = await github.repos.getTags({owner: owner, repo: repo})
    for (const githubTag of githubTags) {
      githubTag.name && (available[githubTag.name] = githubTag)
    }

    const newTag = Object.keys(available).sort().pop()
    if (newTag) {
      fs.ensureDir(dist)
      const commit = (available[tag] || available[newTag])
      const tarBall = commit.zipball_url
      const sha = commit.commit.sha.substr(0, 7)
      const project = `${owner}-${repo}-${sha}/`
      const file = path.join(dist, path.basename(tarBall))
      await download(tarBall, dist)
      const zipFile = new zip(file)
      const zipEntries = zipFile.getEntries();
      zipEntries.forEach(function(zipEntry) {
        const entry = zipEntry.rawEntryName.toString()
        if (entry !== project && !zipEntry.isDirectory) {
          const real = path.join(dist, entry.replace(new RegExp(`^${project}`), ''))
          fs.outputFile(real, zipEntry.getData().toString())
        }
      });

      fs.unlinkSync(file)
      if (command) {
        process.chdir(dist)
        const exec = command.replace(/\s+/g, ' ').split(' ')
        spawn(exec.shift(), exec)
      }
    }
  }
})

app.listen(port, hostname)
