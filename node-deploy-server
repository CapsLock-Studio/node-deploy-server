#!/usr/bin/env node --harmony-async-await

const app = require('express')()
const path = require('path')
const GitHubApi = require('github')
const crypto = require('crypto')
const download = require('download')
const zip = require('adm-zip')
const fs = require('fs-extra')
const exec = require('child_process').exec
const hostname = process.env.HOSTNAME || '127.0.0.1'
const port = process.env.PORT || 3000
const secret = process.env.SECRET || ''
const github = new GitHubApi({
  debug: true,
  protocol: 'https',
  host: 'api.github.com',
  headers: {
    'user-agent': 'node-deploy-server'
  },
  Promise: require('bluebird'),
  followRedirects: false,
  timeout: 5000
})
const signature = (json) => {
  const payload = JSON.stringify(json).replace(/[\u007F-\uFFFF]/g, (chr) => {
    return '\\u' + ('0000' + chr.charCodeAt(0).toString(16)).substr(-4)
  })
  const hmac = crypto.createHmac('sha1', secret)
  hmac.update(payload)
  const hex = hmac.digest('hex')
  const sha1 = `sha1=${hex}`

  return sha1
}

app.use(require('body-parser').json())
app.post('/', async (req, res) => {
  if (signature(req.body) != req.headers['x-hub-signature']) {
    return res.sendStatus(403)
  }

  const tag = req.body.tag
  const command = req.body.command
  const owner = req.body.owner
  const repo = req.body.repo
  const dist = req.body.dist

  if (owner && repo && dist) {
    const available = {}
    const githubTags = await github.repos.getTags({owner: owner, repo: repo})
    for (const githubTag of githubTags) {
      githubTag.name && (available[githubTag.name] = githubTag)
    }

    const newTag = Object.keys(available).sort().pop()
    if (newTag) {
      const commit = (available[tag] || available[newTag])
      const tarTag = commit.name
      const tarBall = commit.zipball_url
      const sha = commit.commit.sha.substr(0, 7)
      const project = `${owner}-${repo}-${sha}/`
      const bak = `${dist}_${sha}_bak`
      const file = path.join(dist, path.basename(tarBall))
      const log = path.join(dist, '.node-deploy-server-log.json')
      const backlog = fs.existsSync(log) ? fs.readJsonSync(log, {throws: false}) : []

      if (backlog.indexOf(tarTag) !== -1 && !tag) {
        return res.sendStatus(200)
      } else {
        backlog.indexOf(tarTag) === -1 && backlog.push(tarTag)
      }

      fs.existsSync(bak) && fs.removeSync(bak)
      fs.existsSync(dist) && fs.renameSync(dist, bak)

      try {
        fs.ensureDir(dist)
        await download(tarBall, dist)
        const zipFile = new zip(file)
        const zipEntries = zipFile.getEntries();
        zipEntries.forEach(function(zipEntry) {
          const entry = zipEntry.rawEntryName.toString()
          if (entry !== project && !zipEntry.isDirectory) {
            const real = path.join(dist, entry.replace(new RegExp(`^${project}`), ''))
            fs.outputFile(real, zipEntry.getData().toString())
          }
        });

        if (command) {
          exec(command, {cwd: dist});
        }

        fs.outputJsonSync(log, backlog)
        res.sendStatus(200)
      } catch (e) {
        fs.existsSync(dist) && fs.removeSync(dist)
        fs.existsSync(bak) && fs.renameSync(bak, dist)
        res.sendStatus(500)
      } finally {
        fs.existsSync(bak) && fs.removeSync(bak)
        fs.existsSync(file) && fs.removeSync(file)
      }
    }
  }
})

app.listen(port, hostname)
